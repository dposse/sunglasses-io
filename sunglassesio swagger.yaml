#Layout of swagger file:
# General information
# Paths
# Definitions

# General information ###############################################################
swagger: '2.0'
info:
  version: 1.0.0
  title: Sunglasses.io API
  description: API for Sunglasses.io, an online sunglasses store
  contact:
    name: Daniel Posse
    url: http://github.com/dposse
    email: dan.e.posse@gmail.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: sunglasses.io
basePath: /api
consumes:
  - application/json
produces: 
  - application/json
schemes: 
  - https
# Paths #############################################################################
paths:
  /brands:
    get:
      tags: 
        - Brands
      summary: Get brands
      description: The /brands endpoint allows you to get all brands sold at Sunglasses.io as well as search brands.
      parameters:
        - name: query
          in: query
          description: Search query string
          type: string
          required: false
      responses:
        200: 
          description: An array of brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        404:
          description: Brand not found
          schema:
            $ref: '#/definitions/Error'
  /brands/{id}/products:
    get:
      tags:
        - Brands
      summary: Get products of brand
      description: The /brands/{id}/products endpoint allows you to get all products of specified brand
      parameters:
        - name: id
          in: path
          description: The id of the selected brand
          type: string
          required: true
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: Brand not found
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      tags:
        - Products
      summary: Get products
      description: The /products endpoint allows you to get all available products and search for products by name or description
      parameters:
        - name: query
          in: query
          description: Search query string
          type: string
          required: false
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      parameters:
        - name: loginInfo
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Login successful - authentication token returned
          schema:
            type: object
            properties:
              accessToken:
                type: string
                example: NY8Z7rIAU4SYeDR8
        400:
          description: Incorrectly formatted request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Invalid username or password
          schema:
            $ref: '#/definitions/Error'
  /me/cart:
    get:
      tags:
        - User
      summary: Get user's shopping cart
      description: The /me/cart GET endpoint allows you to get an array of items in the logged in user's shopping cart
      parameters:
        - name: accessToken
          in: query
          description: Access token given to logged in users for authentication
          type: string
          required: true
      responses:
        200:
          description: An array of products and their quantities
          schema:
            type: array
            items:
              type: object
              properties:
                product:
                  $ref: '#/definitions/Product'
                quantity:
                  type: integer
                  example: 2
        403:
          description: Unauthorized - Missing or invalid accessToken, can only access cart if user is logged in
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
      summary: Add new item to user's shopping cart
      description: The /me/cart POST endpoint allows you to add an item to the logged in user's shopping cart
      parameters:
        - name: accessToken
          in: path
          description: Access token given to logged in users for authentication
          type: string
          required: true
        - name: productId
          in: path
          description: Unique ID of the product to be added to logged in user's cart
          type: string
          required: true
      responses:
        200:
          description: Copy of product added to user's shopping cart
          schema:
            $ref: '#/definitions/Product'
        403:
          description: Unauthorized - Missing or invalid accessToken, can only access cart if user is logged in
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
  /me/cart/{id}:
    put:
      tags:
        - User
      summary: Edit quantity of item
      description: The /me/cart/:productId PUT endpoint allows you to edit the quantity of a product in the logged in user's shopping cart
      parameters:
        - name: id
          in: path
          description: The id of the product in shopping cart
          type: string
          required: true
        - name: accessToken
          in: path
          description: Access token given to logged in users for authentication
          type: string
          required: true
        - name: quantity
          in: path
          description: Change amount of selected product in shopping cart to quantity
          type: string
          required: true
      responses:
        200:
          description: Copy of product editted in user's shopping cart
          schema:
            type: object
            properties:
              product:
                $ref: '#/definitions/Product'
              quantity:
                type: integer
                example: 2
        400:
          description: Invalid quantity
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Unauthorized - Missing or invalid accessToken, can only access cart if user is logged in
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      summary: Delete item
      description: The /me/cart/:productId DELETE endpoint allows you to delete a product from the logged in user's shopping cart
      parameters:
        - name: id
          in: path
          description: The id of the product in shopping cart
          type: string
          required: true
        - name: accessToken
          in: path
          description: Access token given to logged in users for authentication
          type: string
          required: true
      responses: 
        200:
          description: Copy of product removed from user's cart
          schema:
            $ref: '#/definitions/Product'
        403:
          description: Unauthorized - Missing or invalid accessToken, can only access cart if user is logged in
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
# Definitions #######################################################################
definitions:
  Brand:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a brand's ID
        example: '1'
      name:
        type: string
        description: Name of brand
        example: 'Oakley'
  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a product
        example: '1'
      categoryId:
        type: string
        description: Unique identifier for a product's brand
        example: '1'
      name:
        type: string
        description: Product name
        example: 'Superglasses'
      description:
        type: string
        description: Description of the product
        example: 'The best glasses in the world'
      price:
        type: number
        description: Price of the product
        example: 150
      imageUrls:
        type: array
        description: Array of image URLs
        items:
          type: string
          example: 'https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg'
  User:
    type: object
    required: 
      - username
      - password
    properties:
      username:
        type: string
        example: 'yellowleopard753'
      password:
        type: string
        example: 'jonjon'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string