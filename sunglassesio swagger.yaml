swagger: '2.0'
info:
  version: 1.0.0
  title: Sunglasses.io API
  description: ''
  termsOfService: terms
  contact:
    name: Daniel Posse
    url: http://github.com/dposse
    email: dan.e.posse@gmail.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: sunglasses.io
basePath: /api
produces: 
  - application/json
schemes: 
  - https
paths:
  /brands:
    get:
      tags: 
        - Brands
      summary: Get brands
      description: The /brands endpoint allows you to get all brands sold at Sunglasses.io as well as search brands.
      parameters:
        - name: query
          in: query
          description: Search query string
          type: string
          required: false
      responses:
        200: 
          description: An array of brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands/{id}/products:
    get:
      tags:
        - Brands
      summary: Get products of brand
      description: The /brands/{id}/products endpoint allows you to get all products of specified brand
      parameters:
        - name: id
          in: path
          description: The id of the selected brand
          type: string
          required: true
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      tags:
        - Products
      summary: Get products
      description: The /products endpoint allows you to get all available products and search for products by name or description
      parameters:
        - name: query
          in: query
          description: Search query string
          type: string
          required: false
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      parameters:
        - name: loginInfo
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Login successful - authentication token returned
          schema:
            type: string
            example: '0987sdfgjkh'
        400:
          description: Invalid username or password
          schema:
            $ref: '#/definitions/Error'
  /me/cart:
    get:
      tags:
        - User
      summary: Get user's shopping cart
      description: The /me/cart endpoint allows you to get an array of items in the logged in user's shopping cart
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        401:
          description: Unauthorized - Can only get cart if user is logged in, requires authentication token
          schema:
            $ref: '#/definitions/Error'
      
              
definitions:
  Brand:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a brand's ID
        example: '1'
      name:
        type: string
        description: Name of brand
        example: 'Superglasses'
  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a product
        example: '1'
      categoryId:
        type: string
        description: Unique identifier for a product's brand
        example: '1'
      name:
        type: string
        description: Product name
        example: 'Superglasses'
      description:
        type: string
        description: Description of the product
        example: 'The best glasses in the world'
      price:
        type: number
        description: Price of the product
        example: 150
      imageUrls:
        type: array
        description: Array of image URLs
        items:
          type: string
          example: 
            - 'https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg'
            - 'https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg'
  User:
    type: object
    required: 
      - username
      - password
    properties:
      username:
        type: string
        example: 'yellowleopard753'
      password:
        type: string
        example: 'jonjon'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 404
      message:
        type: string
        example: 'Brand not found'
      fields:
        type: string
        example: 'query'